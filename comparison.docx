1.) แนวทางการใช้งาน
    - Utility Classes
        - ใช้คลาสสำเร็จรูปที่มีคุณสมบัติ CSS ระบุไว้อย่างชัดเจน เช่น bg-red-500, text-center
        - ทำงานโดยตรงใน HTML, ไม่ต้องเขียน CSS เอง
    - CSS ปกติ
        - เขียนโค้ด CSS แยกในไฟล์หรือ <style> แล้วเชื่อมโยงกับ HTML ผ่านคลาส เช่น .btn { background-color: red; }
        - ต้องเขียน CSS เองสำหรับสไตล์เฉพาะ

2.) ความยืดหยุ่น
    - Utility Classes
        - จำกัดการใช้งานเฉพาะคลาสสำเร็จรูปที่เฟรมเวิร์กให้มา
        - หากต้องการเพิ่มคุณสมบัติที่ไม่มีใน Utility ต้องปรับแต่งหรือเขียนเพิ่ม
    - CSS ปกติ
        - มีความยืดหยุ่นสูง เขียนสไตล์ได้ตามต้องการ
        - ออกแบบและจัดการสไตล์ได้ทุกอย่าง

3.) ประสิทธิภาพและการทำงานร่วมกัน
    - Utility Classes
        - ลดปัญหา CSS Overlapping เนื่องจากคลาสมีคุณสมบัติเฉพาะตัว
        - ใช้งานง่ายสำหรับทีมพัฒนา, โดยเฉพาะเมื่อทุกคนเข้าใจ Utility Classes
    - CSS ปกติ
        - มีโอกาสเกิดปัญหา CSS ซ้อนกัน (Selector Conflicts)
        - การทำงานร่วมกันอาจยุ่งยากในโปรเจกต์ใหญ่ที่มี CSS ซับซ้อน

4.) การจัดการขนาดไฟล์
    - Utility Classes
        - เฟรมเวิร์กอย่าง Tailwind CSS มีฟีเจอร์ PurgeCSS ช่วยลบคลาสที่ไม่ได้ใช้งานเพื่อลดขนาดไฟล์
        - ไม่มีโค้ด CSS ซ้ำซ้อนใน Utility Classes
    - CSS ปกติ
        - ไฟล์ CSS อาจใหญ่ขึ้นหากไม่ได้จัดการอย่างเหมาะสม
        - มีโอกาสเกิดโค้ด CSS ซ้ำซ้อน (Code Duplication)

5.) การบำรุงรักษา
    - Utility Classes
        - การเปลี่ยนแปลงมักง่ายกว่า เพราะการแก้ไขทำใน HTML เลย
        - โค้ด HTML อาจดูรกเพราะคลาสเยอะ
    - CSS ปกติ
        - การแก้ไขต้องตามหาและเปลี่ยนในไฟล์ CSS ซึ่งอาจยุ่งยากในโปรเจกต์ใหญ่
        - HTML ดูสะอาดกว่า แต่ต้องดู CSS แยก